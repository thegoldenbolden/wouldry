datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id                String   @id @unique
  name              String?
  avatarUrl         String?  @map("avatar_url")
  accentColor       String?  @map("accent_color")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?  @db.Text
  id_token          String?  @db.Text
  session_state     String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Choice {
  id         String @id @unique
  body       String @db.Text
  vote_count Int    @default(0)
  votes      Vote[]

  ratherId String @map("rather_id")
  rather   Rather @relation(fields: [ratherId], references: [id], onDelete: Cascade)

  @@unique([id, ratherId])
  @@index(ratherId)
  @@map(name: "choice")
}

model Comment {
  id        String   @id
  body      String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  isDeleted   Boolean @default(false) @map("is_deleted")

  authorId String? @map("author_id")
  author   User?   @relation(fields: [authorId], references: [id], onDelete: NoAction)

  forumId       String    @map("forum_id")
  forumAuthorId String?   @map("forum_author_id")
  rather        Rather?   @relation(map: "rather_fk", fields: [forumId, forumAuthorId], references: [id, authorId], onDelete: Cascade)
  parentId      String?   @map("parent_id")
  parent        Comment?  @relation("replies", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  replies       Comment[] @relation("replies")

  @@index(authorId)
  @@index(parentId)
  @@index([forumId, forumAuthorId])
  @@map(name: "comment")
}

model Rather {
  id          String    @id
  number      Int       @unique @default(autoincrement())
  slug        String
  title       String    @default("Would You Rather?")
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  authorId    String?   @map("author_id")
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  choices     Choice[]
  comments    Comment[]
  votes       Vote[]

  commentsEnabled Boolean @default(true) @map("comments_enabled")
  isDeleted       Boolean @default(false) @map("is_deleted")

  @@unique([id, authorId])
  @@index(authorId)
  @@map(name: "rather")
}

model Session {
  id           String   @id
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
  @@map(name: "session")
}

model User {
  id            String    @id @unique
  position      Int       @unique @default(autoincrement())
  email         String    @unique
  emailVerified DateTime? @default(now()) @map("email_verified")
  username      String    @unique
  name          String    @map("display_name")
  image         String    @map("avatar_url")
  accentColor   String    @default("#1f8fff") @map("accent_color")
  biography     String?
  createdAt     DateTime  @default(now()) @map("created_at")

  isDeleted   Boolean @default(false) @map("is_deleted")

  comments Comment[]
  votes    Vote[]
  rathers  Rather[]

  accounts Account[]
  sessions Session[]

  @@map(name: "user")
}

model Vote {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  choiceId  String   @map("choice_id")
  choice    Choice   @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  forumId   String   @map("forum_id")
  rather    Rather   @relation(fields: [forumId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, forumId])
  @@index(forumId)
  @@index(choiceId)
  @@map(name: "vote")
}
