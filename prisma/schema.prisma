datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id             String   @id @unique
  nickname       String?
  username       String?
  image          String?  @map("avatar_url")
  provider       String
  providerUserId String   @map("provider_user_id")
  expiresAt      Int?     @map("expires_at")
  scope          String?  @db.Text
  createdAt      DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@index([userId])
  @@map(name: "oauth_account")
}

model Option {
  id         String @id @unique
  value      String @db.Text
  vote_count Int    @default(0)
  votes      Vote[]

  pollId String @map("poll_id")
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([id, pollId])
  @@index(pollId)
  @@map(name: "option")
}

model Comment {
  id        String   @id
  body      String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  isDeleted Boolean @default(false) @map("is_deleted")

  authorId String? @map("author_id")
  author   User?   @relation(fields: [authorId], references: [id], onDelete: NoAction)

  forumId      String    @map("forum_id")
  forumOwnerId String?   @map("forum_owner_id")
  poll         Poll?     @relation(map: "poll_fk", fields: [forumId, forumOwnerId], references: [id, authorId], onDelete: Cascade)
  parentId     String?   @map("parent_id")
  parent       Comment?  @relation("replies", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  replies      Comment[] @relation("replies")

  @@index(authorId)
  @@index(parentId)
  @@index([forumId, forumOwnerId])
  @@map(name: "comment")
}

model Poll {
  id          String    @id
  number      Int       @unique @default(autoincrement())
  slug        String
  title       String    @default("Would You poll?")
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  authorId    String?   @map("author_id")
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  options     Option[]
  comments    Comment[]
  votes       Vote[]

  commentsEnabled Boolean @default(true) @map("comments_enabled")
  isDeleted       Boolean @default(false) @map("is_deleted")

  @@unique([id, authorId])
  @@index(authorId)
  @@map(name: "poll")
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
  @@map(name: "session")
}

model Topics {
  name      String @id @unique
  permalink String

  @@index([name])
  @@map("topic")
}

model User {
  id            String    @id @unique
  count         Int       @unique @default(autoincrement())
  email         String    @unique
  emailVerified DateTime? @default(now()) @map("email_verified")
  username      String    @unique
  nickname      String
  image         String    @map("avatar_url")
  about         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  isDeleted     Boolean   @default(false) @map("is_deleted")

  comments Comment[]
  votes    Vote[]
  polls    Poll[]
  accounts Account[]
  sessions Session[]

  @@index([id])
  @@index([username])
  @@index([email])
  @@map(name: "user")
}

model Vote {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  optionId  String   @map("option_id")
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  forumId   String   @map("forum_id")
  poll      Poll     @relation(fields: [forumId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, forumId])
  @@index(forumId)
  @@index(optionId)
  @@map(name: "vote")
}
